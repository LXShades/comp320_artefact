using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Impostify : MonoBehaviour
{
    [Header("Here goes nothing!")]
    [Header("Texture parameters")]
    public int renderTextureWidth = 256;
    public int renderTextureHeight = 256;

    public Shader materialShader;

    /** Reference to the impostor generated by this impostifier */
    GameObject impostor;

    /** Texture to be used to render the impostor */
    RenderTexture impostorTexture;
    
    /** Material onto which the impostor texture will be applied */
    Material impostorMaterial;

    /** The camera that snapshots the impostors. We only need one such camera in the scene */
    static Camera impostorCamera
    {
        get
        {
            if (_impostorCamera)
            {
                return _impostorCamera;
            }
            else
            {
                _impostorCamera = FindOrCreateImpostorCamera();
                return _impostorCamera;
            }
        }
    }
    static Camera _impostorCamera;

    Camera mainCamera;

    void Start()
    {
        mainCamera = Camera.main;
    }

    void Update()
    {
        if (Input.GetKeyDown(KeyCode.Space))
        {
            RefreshImpostor();
        }
        GetComponent<Renderer>().enabled = !Input.GetKey(KeyCode.Space);
    }

    void RefreshImpostor()
    {
        CleanupResources();

        // Create the render texture for the impostor
        if (!impostorTexture)
        {
            impostorTexture = new RenderTexture((int)renderTextureWidth, (int)renderTextureWidth, 16);
        }

        // Render the impostor
        SetupImpostorCamera();

        RenderImpostor();
        
        // Create the impostor plane. For now, it will be massive, covering the entire view and using alphas for edges. This is very inefficient and no it must not be done
        float planeSize = 60f;
        impostor = GameObject.CreatePrimitive(PrimitiveType.Plane);

        impostor.transform.position = mainCamera.transform.position + mainCamera.transform.forward * (planeSize / Mathf.Tan(Mathf.Deg2Rad * impostorCamera.fieldOfView * 0.5f) / 2);
        impostor.transform.localScale = new Vector3(mainCamera.aspect * planeSize * 0.1f, planeSize * 0.1f, planeSize * 0.1f);
        impostor.transform.rotation = Quaternion.LookRotation(-Vector3.up, mainCamera.transform.position - impostor.transform.position);

        // Update the material
        impostorMaterial = new Material(materialShader);

        impostorMaterial.SetFloat("_Cutoff", 0.99f);

        impostorMaterial.mainTexture = impostorTexture;

        impostor.GetComponent<MeshRenderer>().sharedMaterial = impostorMaterial;
        
    }

    void CleanupResources()
    {
        if (impostor)
        {
            impostor.active = false;
            GameObject.Destroy(impostor);

            if (impostorTexture)
            {
                impostorTexture.Release();
                impostorTexture = null;
            }

            impostorMaterial = null;
        }
    }

    public static Camera FindOrCreateImpostorCamera()
    {
        // Some references are lost during recompile, so do a quick search for one first
        GameObject foundCamera = GameObject.Find("_ImpostorCamera_");

        if (!foundCamera)
        {
            // Create it!
            GameObject cameraObject = new GameObject("ImpostorCamera", typeof(Camera));

            cameraObject.GetComponent<Camera>().enabled = false;
            return cameraObject.GetComponent<Camera>();
        }
        else
        {
            return foundCamera.GetComponent<Camera>();
        }
    }

    void SetupImpostorCamera()
    {
        // Setup the impostor camera
        Camera camera = impostorCamera;

        camera.aspect = mainCamera.aspect;
        camera.fieldOfView = mainCamera.fieldOfView;
        camera.transform.position = mainCamera.transform.position;
        camera.transform.rotation = mainCamera.transform.rotation;
        camera.targetTexture = impostorTexture;
    }

    void RenderImpostor()
    {
        Camera camera = impostorCamera;
        int oldLayer = gameObject.layer;

        // Clear the background pixels
        camera.clearFlags = CameraClearFlags.Color;
        camera.backgroundColor = new Color(0, 0, 0, 0);

        // Setup to render only this object
        gameObject.layer = 30;
        camera.cullingMask = 1<<gameObject.layer;

        // Render to the impostor
        camera.Render();
        camera.targetTexture = null;
        camera.enabled = false;

        // Done!
        gameObject.layer = oldLayer;
    }
}
